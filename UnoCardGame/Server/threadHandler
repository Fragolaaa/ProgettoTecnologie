package Server;
//gestisce i vari thread
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

public class threadHandler extends Thread {
    private Game server = null;
    private Socket socket = null;
    private PrintWriter out = null;
    private BufferedReader in = null;
    private boolean listening = true;
    private boolean ready = false;
    
    public String name = "";
    
    private static class Message {
        public String mess;
        public String content;
        
        public Message(String txt) {
            recip = txt.substring(txt.indexOf("###sendto")+10, txt.indexOf("###message="));
            content = txt.substring(txt.indexOf("###message")+11, txt.length());
        }
        
        @Override
        public String toString() {
            return "Recipiant: " + mess + " Message: " + content;
        }
    }
    
    public threadHandler(Game server, Socket socket) {
        this.socket = socket;
        this.server = server;
        try {
            this.out = new PrintWriter(socket.getOutputStream(), true);
            this.in = in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        } catch (IOException e) {System.err.println("Errore lol");}
    }
    
    public Socket getSocket() {
        return this.socket;
    }
    
    public void sendMessage(String sender, String incMessage) {
       out.println("###sentfrom=" + sender + "###message=" + incMessage);
    }
    
    public void kill() {
        listening = false;
    }
    
    @Override
    public void run() {
        try {
            String inputLine;
            
            while ((inputLine = in.readLine()) != null && listening) {
                Message message = new Message(inputLine);
                if (message.recip.equals("server")) {
                    if (message.content.equals("###disconnecting###")) {
                        server.sendMessage("all", name, "###potential_chat_disconnected###");
                        break;
                    }
                    else if (message.content.contains("###name=")) { //il client vuole inviare il suo nome
                        name = message.content.substring(message.content.indexOf("=")+1, message.content.length()-3);
                        
                        int res = server.addClient(this);
                        if (res == 0) { 
                            ready = true;
                        } else if (res == 1) {
                            sendMessage("server", "###too_many_connections###");//se superato numero giocatori
                            break;
                        } else if (res == 2) {
                            sendMessage("server", "###name_already_taken###"); //se nome già occupato
                            break;
                        }
                    }
                    else if (message.content.contains("###players=")) { //il client vuole il numero di giocatori
                        
                        
                        FindClients();
                    }
                } else {
                    if (ready) {
                        if (message.content.equals("###new_game_window###")) {
                            server.newGame(name, message.recip);
                        }
                        else if (message.content.contains("###reverse")) { 
                            server.reverse(name, message.recip);
                        }
                        else if (message.content.contains("###change_color")) { 
                            server.change_color(name, message.recip);
                        }
                        else if (message.content.contains("###skip")) { 
                            server.skip(name, message.recip);
                        }
                        else if (message.content.contains("###draw_cards")) { 
                            server.drawCards(name, message.recip);
                        }
                        else if (message.content.equals("###game_over###you_win###")) {
                            server.endGame(name, message.recip);//avviso il giocatore che ha vinto e che il gioco è finito
                        }
                        else if (message.content.equals("###new_game_restarted###")) {
                            server.restartGame(name, message.recip);
                        }
                        
                        else {
                            server.sendMessage(message.recip, name, message.content);
                        }
                    }
                }
            }
            
            out.close();
            in.close();
            socket.close();
            if (ready) {
                server.removeClient(this);
            }
            
        } catch (IOException e) {}
    }
}
